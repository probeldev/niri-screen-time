package autostartmanager

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/probeldev/niri-screen-time/bash"
)

type AutoStartManager struct {
	appName     string
	plistPath   string
	programPath string
	args        []string
}

// NewAutoStartManager —Å–æ–∑–¥–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
func NewAutoStartManager(programPath string, args []string) (*AutoStartManager, error) {
	homeDir, err := os.UserHomeDir()
	if err != nil {
		return nil, err
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è plist-—Ñ–∞–π–ª–∞
	appName := filepath.Base(programPath)
	plistPath := filepath.Join(homeDir, "Library", "LaunchAgents",
		fmt.Sprintf("com.niri.screentime.%s.plist", appName))

	return &AutoStartManager{
		appName:     appName,
		plistPath:   plistPath,
		programPath: programPath,
		args:        args,
	}, nil
}

// NewAutoStartManagerForMacOs —Å–æ–∑–¥–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è niri-screen-time
func NewAutoStartManagerForMacOs() (*AutoStartManager, error) {
	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É
	execPath, err := os.Executable()
	if err != nil {
		return nil, fmt.Errorf("failed to get executable path: %v", err)
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –±–∏–Ω–∞—Ä–Ω–∏–∫—É
	programPath := execPath
	args := []string{"-daemon"}

	return NewAutoStartManager(programPath, args)
}

func (a *AutoStartManager) Enable() error {
	// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤
	programArgs := []string{a.programPath}
	programArgs = append(programArgs, a.args...)

	// –§–æ—Ä–º–∏—Ä—É–µ–º XML –¥–ª—è ProgramArguments
	argsXML := ""
	for _, arg := range programArgs {
		argsXML += fmt.Sprintf("        <string>%s</string>\n", arg)
	}

	plistContent := fmt.Sprintf(`<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.niri.screentime.%s</string>
    <key>ProgramArguments</key>
    <array>
%s    </array>
    <key>RunAtLoad</key>
    <true/>
    <key>KeepAlive</key>
    <true/>
    <key>StandardOutPath</key>
    <string>/tmp/%s.log</string>
    <key>StandardErrorPath</key>
    <string>/tmp/%s.error.log</string>
    <key>EnvironmentVariables</key>
    <dict>
        <key>PATH</key>
        <string>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin</string>
    </dict>
</dict>
</plist>`, a.appName, argsXML, a.appName, a.appName)

	dir := filepath.Dir(a.plistPath)
	if err := os.MkdirAll(dir, 0755); err != nil {
		return err
	}

	if err := os.WriteFile(a.plistPath, []byte(plistContent), 0644); err != nil {
		return err
	}

	fmt.Printf("‚úì –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤–∫–ª—é—á–µ–Ω –¥–ª—è %s: %s\n", a.programPath, a.plistPath)
	return nil
}

func (a *AutoStartManager) Load() error {
	cmd := fmt.Sprintf("launchctl load \"%s\"", a.plistPath)
	_, err := bash.RunCommand(cmd)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª—É–∂–±—ã: %v", err)
	}
	fmt.Println("‚úì –°–ª—É–∂–±–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
	return nil
}

func (a *AutoStartManager) Unload() error {
	cmd := fmt.Sprintf("launchctl unload \"%s\"", a.plistPath)
	_, err := bash.RunCommand(cmd)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ —Å–ª—É–∂–±—ã: %v", err)
	}
	fmt.Println("‚úì –°–ª—É–∂–±–∞ –≤—ã–≥—Ä—É–∂–µ–Ω–∞")
	return nil
}

func (a *AutoStartManager) EnableAndLoad() error {
	if err := a.Enable(); err != nil {
		return err
	}
	return a.Load()
}

func (a *AutoStartManager) Disable() error {
	// –°–Ω–∞—á–∞–ª–∞ –≤—ã–≥—Ä—É–∂–∞–µ–º —Å–ª—É–∂–±—É
	a.Unload()

	// –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º plist-—Ñ–∞–π–ª
	if err := os.Remove(a.plistPath); err != nil {
		if os.IsNotExist(err) {
			return fmt.Errorf("–∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–µ –±—ã–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
		}
		return err
	}

	fmt.Println("‚úì –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω")
	return nil
}

func (a *AutoStartManager) Status() (bool, bool) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ plist-—Ñ–∞–π–ª–∞
	plistExists := false
	if _, err := os.Stat(a.plistPath); err == nil {
		plistExists = true
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —Å–ª—É–∂–±–∞
	cmd := fmt.Sprintf("launchctl list | grep com.niri.screentime.%s", a.appName)
	output, err := bash.RunCommand(cmd)
	isRunning := err == nil && strings.Contains(output, "com.niri.screentime."+a.appName)

	return plistExists, isRunning
}

// GetPlistPath –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É plist-—Ñ–∞–π–ª—É
func (a *AutoStartManager) GetPlistPath() string {
	return a.plistPath
}

// CheckAndFixPermissions –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
func (a *AutoStartManager) CheckAndFixPermissions() error {
	fmt.Println("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...")

	// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è Accessibility
	script := `
	osascript <<'EOF'
	tell application "System Events"
		-- –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ UI —ç–ª–µ–º–µ–Ω—Ç—ã
		if not UI elements enabled then
			display dialog "niri-screen-time —Ç—Ä–µ–±—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è Accessibility –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–∫–æ–Ω." & return & return & ¬¨
			"–ù–∞–∂–º–∏—Ç–µ 'Open Settings' –∏ –¥–æ–±–∞–≤—å—Ç–µ niri-screen-time –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π." ¬¨
			with title "–¢—Ä–µ–±—É—é—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è" ¬¨
			with icon caution ¬¨
			buttons {"Open Settings", "Cancel"} ¬¨
			default button 1
			
			if button returned of result is "Open Settings" then
				tell application "System Preferences"
					activate
					reveal anchor "Privacy_Accessibility" of pane "com.apple.preference.security"
				end tell
			end if
		else
			-- –£–∂–µ –µ—Å—Ç—å –ø—Ä–∞–≤–∞, –ø—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
			try
				set appPath to "%s"
				tell application "System Events"
					tell process "System Preferences"
						if exists then
							-- –£–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
						end if
					end tell
				end tell
			on error
				-- –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ –ø—Ä–∞–≤–∞ –µ—Å—Ç—å
			end try
		end if
	end tell
	EOF
	`

	_, err := bash.RunCommand(fmt.Sprintf(script, a.programPath))
	if err != nil {
		fmt.Printf("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∞: %v\n", err)
		fmt.Println("üìã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤—å—Ç–µ niri-screen-time –≤:")
		fmt.Println("   System Settings ‚Üí Privacy & Security ‚Üí Accessibility")
	} else {
		fmt.Println("‚úì –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
	}

	return nil
}
